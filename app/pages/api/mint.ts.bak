// pages/api/mint.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { ethers } from "ethers";
import { nft721Abi } from "../../lib/nft/abis/nft721";
import { ADDR } from "../../lib/nft/config";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).end();

  try {
    const { to, uri, privateKey } = req.body as {
      to?: string;
      uri?: string;
      privateKey?: string;
    };
    if (!to || !uri || !privateKey)
      return res.status(400).json({ error: "Missing params (to, uri, privateKey)" });

    const provider = new ethers.JsonRpcProvider(process.env.BSC_RPC_URL);
    const wallet = new ethers.Wallet(privateKey, provider);
    const nft = new ethers.Contract(ADDR.NFT721, nft721Abi, wallet);

    const mintFee = await nft.mintFeeWei();
    const tx = await nft.mintWithFee(to, uri, { value: mintFee });
    const receipt = await tx.wait();

    res.status(200).json({
      success: true,
      hash: tx.hash,
      blockNumber: receipt.blockNumber,
    });
  } catch (err: unknown) {
    const message = err instanceof Error ? err.message : "Unknown error";
    // eslint-disable-next-line no-console
    console.error("Mint error:", err);
    res.status(500).json({ error: message });
  }
}
