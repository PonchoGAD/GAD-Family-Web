// app/nft/upload/UploadMintClient.tsx
"use client";

import React, { useState } from "react";
import { useWeb3Modal } from "@web3modal/wagmi/react";
import { useAccount, useWriteContract, useChainId } from "wagmi";
import Image from "next/image";
import { ADDR, CHAIN_ID } from "../../lib/nft/constants";
import { bsc, bscTestnet, avalanche, avalancheFuji, sepolia } from "wagmi/chains";

const nft721Abi = [
  {
    name: "mintWithFee",
    type: "function",
    stateMutability: "payable",
    inputs: [
      { name: "to", type: "address" },
      { name: "uri", type: "string" },
    ],
    outputs: [],
  },
] as const;

const chainFromId = (id: number) =>
  id === 56 ? bsc : id === 97 ? bscTestnet : id === 43114 ? avalanche : id === 43113 ? avalancheFuji : sepolia;

export default function UploadMintClient() {
  const { open } = useWeb3Modal();
  const { address, isConnected } = useAccount();
  const currentChainId = useChainId();
  const { writeContractAsync } = useWriteContract();

  const [fileDataUrl, setFileDataUrl] = useState<string>("");
  const [name, setName] = useState("My NFT");
  const [description, setDescription] = useState("");
  const [status, setStatus] = useState<string>("");
  const [busy, setBusy] = useState(false);

  const onFile = (f?: File) => {
    if (!f) return;
    const reader = new FileReader();
    reader.onload = () => setFileDataUrl(reader.result as string);
    reader.readAsDataURL(f);
  };

  const uploadToIPFS = async () => {
    const res = await fetch("/nft/api/mint", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ imageBase64: fileDataUrl, name, description }),
    });
    const j = await res.json();
    if (!res.ok) throw new Error(j?.error || "Upload failed");
    return j as { tokenUri: string; imageCid?: string; metadataCid?: string };
  };

  const mint = async () => {
    if (!isConnected) return open();
    if (!address) return;
    if (!fileDataUrl) return alert("Choose an image");

    try {
      setBusy(true);
      setStatus("Uploading to IPFS…");
      const { tokenUri } = await uploadToIPFS();

      setStatus("Sending transaction…");
      const finalChainId = currentChainId || CHAIN_ID;
      const chain = chainFromId(finalChainId);
      const feeWei = BigInt(1_000_000_000_000_000);

      const tx = await writeContractAsync({
        address: ADDR.NFT721 as `0x${string}`,
        abi: nft721Abi,
        functionName: "mintWithFee",
        args: [address as `0x${string}`, tokenUri],
        account: address as `0x${string}`,
        value: feeWei,
        chain,
      });

      setStatus(`Minted! Tx: ${tx}`);
      alert("Minted ✅");
    } catch (e: any) {
      setStatus(e?.message ?? "Mint failed");
      alert(e?.message ?? "Mint failed");
    } finally {
      setBusy(false);
    }
  };

  return (
    <main className="p-6 max-w-3xl mx-auto space-y-6">
      <h1 className="text-2xl font-semibold">Upload &amp; Mint</h1>
      <p className="opacity-70 text-sm">Upload image → IPFS → mintWithFee</p>

      <div className="grid md:grid-cols-2 gap-4">
        <div className="border rounded p-3 space-y-3">
          <div className="font-semibold">1) Image</div>
          <input type="file" accept="image/*" onChange={(e) => onFile(e.target.files?.[0])} />
          {fileDataUrl && (
            <Image
              src={fileDataUrl}
              alt="preview"
              width={512}
              height={512}
              className="rounded border w-full h-auto"
            />
          )}
        </div>

        <div className="border rounded p-3 space-y-3">
          <div className="font-semibold">2) Metadata</div>
          <input
            className="border p-2 w-full rounded"
            placeholder="Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <textarea
            className="border p-2 w-full rounded"
            placeholder="Description"
            rows={4}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </div>
      </div>

      <div className="flex gap-2">
        <button
          className="border px-4 py-2 rounded hover:bg-black hover:text-white disabled:opacity-50"
          onClick={mint}
          disabled={busy || !fileDataUrl || !name.trim()}
        >
          Upload to IPFS &amp; Mint
        </button>
        {status && <div className="text-sm opacity-70 self-center">{status}</div>}
      </div>

      <div className="mt-6 text-xs opacity-70 space-y-1">
        <div>NFT721: {ADDR.NFT721}</div>
      </div>
    </main>
  );
}
