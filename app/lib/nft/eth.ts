// lib/nft/eth.ts
import {
  BrowserProvider,
  JsonRpcProvider,
  type Eip1193Provider,
  type Signer,
} from "ethers";
import { DEFAULT_CHAIN } from "./chains";

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è window.ethereum
 */
function getEth(): Eip1193Provider {
  const eth = (window as unknown as { ethereum?: Eip1193Provider }).ethereum;
  if (!eth) throw new Error("Wallet (window.ethereum) not found");
  return eth;
}

/**
 * üîπ Read-only –ø—Ä–æ–≤–∞–π–¥–µ—Ä (SSR / Public RPC)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: —Ç–æ–∫–µ–Ω—ã, —Ü–µ–Ω—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥.
 */
export const getReadProvider = async (): Promise<JsonRpcProvider> => {
  return new JsonRpcProvider(DEFAULT_CHAIN.rpc, DEFAULT_CHAIN.id);
};

/**
 * üîπ BrowserProvider ‚Äî –æ–±—ë—Ä—Ç–∫–∞ Metamask/EVM
 */
export const getBrowserProvider = async (): Promise<BrowserProvider> => {
  if (typeof window === "undefined") throw new Error("No browser context");
  const eth = getEth();
  return new BrowserProvider(eth, "any");
};

/**
 * üîπ Signer ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ—à–µ–ª—ë–∫ (Metamask)
 * –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–±—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å.
 */
export const getSigner = async (): Promise<Signer> => {
  const provider = await getBrowserProvider();
  await provider.send("eth_requestAccounts", []);

  // –ú—è–≥–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏ (BNB Chain / Testnet)
  try {
    const eth = getEth();
    await eth.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: "0x" + DEFAULT_CHAIN.id.toString(16) }],
    });
  } catch {
    // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }

  return provider.getSigner();
};
