// src/wallet/core/utils/safeAddresses.ts
import { getAddress } from 'viem';
import { TOKENS, NATIVE, WBNB } from '../../../wallet/core/state/WalletStore'; // –ø—É—Ç—å –ø–æ–¥ —Ç–≤–æ–π –∞–ª–∏–∞—Å, –æ—Å—Ç–∞–≤—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –µ—Å–ª–∏ —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ

type KnownSymbol = keyof typeof TOKENS; // 'BNB' | 'WBNB' | 'GAD' | 'USDT'

// ‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ NATIVE –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞/–ø–æ–ª—É—á–∞—Ç–µ–ª—è,
// –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –ø—Å–µ–≤–¥–æ-–∞–¥—Ä–µ—Å –¢–û–õ–¨–ö–û –¥–ª—è UI.
export function assertNotNativeTo(to: string): asserts to is `0x${string}` {
  if (to === NATIVE) {
    throw new Error('Native pseudo-address must not be used on-chain. Use a real 0x... address.');
  }
  if (!to.startsWith('0x')) {
    throw new Error('Recipient must be a valid on-chain address (0x...).');
  }
}

// ‚úÖ –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω ERC-20 –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
// - BNB/NATIVE ‚Üí WBNB
// - –ò–Ω–∞—á–µ: checksum-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
export function toErc20Address(input: KnownSymbol | `0x${string}`): `0x${string}` {
  if (typeof input === 'string' && input.toLowerCase() === 'bnb') {
    return WBNB as `0x${string}`;
  }
  if (input === NATIVE) {
    return WBNB as `0x${string}`;
  }
  if (input in TOKENS) {
    const token = TOKENS[input as KnownSymbol];
    if (token.address === NATIVE) {
      return WBNB as `0x${string}`;
    }
    return getAddress(token.address as `0x${string}`);
  }
  // –£–∂–µ 0x-–∞–¥—Ä–µ—Å ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
  return getAddress(input as `0x${string}`);
}

// üß∞ –£–¥–æ–±–Ω–æ: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å ‚Äú—á—Ç–æ —É–≥–æ–¥–Ω–æ‚Äù –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π on-chain –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤.
// –¢—É—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ NATIVE ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –µ–≥–æ –Ω–µ–ª—å–∑—è –ø–æ–¥–º–µ–Ω—è—Ç—å.
export function normalizeRecipient(to: string): `0x${string}` {
  assertNotNativeTo(to);
  return getAddress(to as `0x${string}`);
}
