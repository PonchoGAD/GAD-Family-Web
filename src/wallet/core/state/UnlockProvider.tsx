'use client';

import React, { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
import type { Address } from 'viem';
import { deriveAddressFromMnemonic } from '@/src/wallet/core/services/seed';
import { getEncryptedMnemonic } from '@wallet/adapters/storage.web';

type UnlockCtx = {
  isUnlocked: boolean;
  address?: Address;
  /** –ï—Å–ª–∏ –∑–∞–ª–æ—á–µ–Ω–æ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç –ø–∞—Ä–æ–ª—å, —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç 20-–º–∏–Ω—É—Ç–Ω—É—é —Å–µ—Å—Å–∏—é */
  requireUnlock: () => Promise<void>;
  /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–Ω–µ–º–æ–Ω–∏–∫—É –∏–∑ –ø–∞–º—è—Ç–∏. –ï—Å–ª–∏ –∑–∞–ª–æ—á–µ–Ω–æ ‚Äî –∫–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É. */
  getMnemonic: () => string;
  /** –ü—Ä—è–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ Create/Open), –±–µ–∑ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ */
  setSession: (mnemonic: string) => void;
  /** –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ª–æ—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ */
  lockNow: () => void;
};

const UnlockContext = createContext<UnlockCtx | null>(null);

const SESSION_TTL_MS = 20 * 60 * 1000; // 20 –º–∏–Ω—É—Ç
const SESSION_KEY = 'gad_wallet_session_expires_at'; // —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö

export function UnlockProvider({ children }: { children: React.ReactNode }) {
  const [isUnlocked, setUnlocked] = useState(false);
  const [address, setAddress] = useState<Address | undefined>(undefined);

  // üîê —Ä–µ–∞–ª—å–Ω–∞—è –º–Ω–µ–º–æ–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ
  const mnemonicRef = useRef<string | null>(null);
  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  const clearTimer = () => {
    if (timerRef.current) clearTimeout(timerRef.current);
    timerRef.current = null;
  };

  const lockNow = useCallback(() => {
    mnemonicRef.current = null;
    setUnlocked(false);
    setAddress(undefined);
    clearTimer();
    if (typeof window !== 'undefined') {
      sessionStorage.removeItem(SESSION_KEY);
    }
  }, []);

  const startTtl = useCallback(() => {
    clearTimer();
    const expires = Date.now() + SESSION_TTL_MS;
    if (typeof window !== 'undefined') {
      sessionStorage.setItem(SESSION_KEY, String(expires));
    }
    timerRef.current = setTimeout(() => {
      lockNow();
    }, SESSION_TTL_MS);
  }, [lockNow]);

  const setSession = useCallback((mnemonic: string) => {
    mnemonicRef.current = mnemonic;
    setUnlocked(true);
    try {
      const addr = deriveAddressFromMnemonic(mnemonic, 0) as Address;
      setAddress(addr);
    } catch {
      // ignore, –ø—É—Å—Ç—å –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Send/Receive
    }
    startTtl();
  }, [startTtl]);

  const getMnemonic = useCallback(() => {
    if (!isUnlocked || !mnemonicRef.current) {
      throw new Error('Wallet is locked');
    }
    return mnemonicRef.current;
  }, [isUnlocked]);

  const requireUnlock = useCallback(async () => {
    // —É–∂–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è?
    if (isUnlocked && mnemonicRef.current) {
      // –ø—Ä–æ–¥–ª–∏–º TTL –Ω–∞ –∫–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
      startTtl();
      return;
    }

    const pwd = window.prompt('Enter your wallet password to unlock');
    if (!pwd) throw new Error('Password is required');

    const m = await getEncryptedMnemonic(pwd);
    if (!m) throw new Error('Wrong password or no wallet found');

    setSession(m);
  }, [isUnlocked, setSession, startTtl]);

  // –ø—Ä–∏ –º–∞—É–Ω—Ç–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É –∏ –∞–≤—Ç–æ–ª–æ–∫
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const raw = sessionStorage.getItem(SESSION_KEY);
    if (!raw) return;
    const expires = Number(raw);
    if (!Number.isFinite(expires) || Date.now() > expires) {
      sessionStorage.removeItem(SESSION_KEY);
      lockNow();
    } else {
      // —É –Ω–∞—Å –Ω–µ—Ç –º–Ω–µ–º–æ–Ω–∏–∫–∏ –≤ –û–ó–£ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å.
      // –º–µ—Ç–∫—É —Å—Ç–∏—Ä–∞–µ–º –∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ª–æ–∫–∞–Ω–æ.
      sessionStorage.removeItem(SESSION_KEY);
      lockNow();
    }
  }, [lockNow]);

  const value = useMemo<UnlockCtx>(() => ({
    isUnlocked,
    address,
    requireUnlock,
    getMnemonic,
    setSession,
    lockNow,
  }), [address, getMnemonic, isUnlocked, lockNow, requireUnlock, setSession]);

  return <UnlockContext.Provider value={value}>{children}</UnlockContext.Provider>;
}

export function useUnlock(): UnlockCtx {
  const ctx = useContext(UnlockContext);
  if (!ctx) throw new Error('useUnlock must be used within UnlockProvider');
  return ctx;
}
